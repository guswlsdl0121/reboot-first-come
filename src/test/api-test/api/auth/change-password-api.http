### 1. 헬스 체크
GET {{host}}/api/health

### 2. 로그인 (해당 body의 계정이 있어야 함)
# @name login
POST {{host}}/api/auth/login
Content-Type: {{contentType}}

{
    "email": "hongchange@gmail.com",
    "password": "password123!"
}

> {%
    client.test("토큰 추출", function() {
        // 상태 코드 검증
        client.assert(response.status === 200, "요청이 성공적이지 않습니다.");

        // X-Auth-Token 헤더 직접 추출
        let authToken = response.headers.valueOf("X-Auth-Token");

        // 토큰을 전역 변수로 설정
        client.global.set("authToken", authToken);
        client.log("토큰 추출 완료:", authToken);
    });
%}

### 3. 비밀번호 변경
POST {{host}}/api/member/change-password
Content-Type: {{contentType}}
X-Auth-Token: {{authToken}}

{
    "current_password": "password123!",
    "new_password": "changepassword123!"
}

### 4. 이전 토큰으로 내 정보 조회 시도 (실패해야 함)
GET {{host}}/api/member/me
X-Auth-Token: {{authToken}}

> {%
    client.test("토큰 무효화 검증", function() {
        // 상태 코드가 401이어야 함
        client.assert(response.status === 403, "토큰이 아직 유효합니다. 상태 코드: " + response.status);
        client.log("토큰 무효화 확인 완료 - 정상적으로 접근이 거부되었습니다.");
    });
%}

### 5. 바뀐 계정으로 로그인 (해당 body의 계정이 있어야 함)
# @name login
POST {{host}}/api/auth/login
Content-Type: {{contentType}}

{
    "email": "hongchange@gmail.com",
    "password": "changepassword123!"
}

> {%
    client.test("토큰 추출", function() {
        // 상태 코드 검증
        client.assert(response.status === 200, "요청이 성공적이지 않습니다.");

        // X-Auth-Token 헤더 직접 추출
        let authToken = response.headers.valueOf("X-Auth-Token");

        // 토큰을 전역 변수로 설정
        client.global.set("authToken", authToken);
        client.log("토큰 추출 완료:", authToken);
    });
%}

### 6. 원래 비밀번호로 변경
POST {{host}}/api/member/change-password
Content-Type: {{contentType}}
X-Auth-Token: {{authToken}}

{
    "current_password": "changepassword123!",
    "new_password": "password123!"
}